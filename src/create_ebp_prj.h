void Set_EBP_prj_stm32f103c8( wxString *buf, wxString prj_name )
{
	*buf = wxEmptyString;
	buf->Append( wxT( "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\" ?>\r\n" ) );
	buf->Append( wxT( "<EmBitz_project_file>\r\n" ) );
	buf->Append( wxT( "<EmBitzVersion release=\"1.11\" revision=\"0\" />\r\n" ) );
	buf->Append( wxT( "<FileVersion major=\"1\" minor=\"0\" />\r\n" ) );
	buf->Append( wxT( "<Project>\r\n" ) );
	buf->Append( wxT( "<Option title=\"" ) + prj_name + wxT( "\" />\r\n" ) );
	buf->Append( wxT( "<Option pch_mode=\"2\" />\r\n" ) );
	buf->Append( wxT( "<Option compiler=\"armgcc_eb\" />\r\n" ) );
	buf->Append( wxT( "<Build>\r\n" ) );
	buf->Append( wxT( "<Target title=\"Debug\">\r\n" ) );
	buf->Append( wxT( "<Option output=\"bin\\Debug\\" ) + prj_name + wxT( "_ebp.elf\" />\r\n" ) );
	buf->Append( wxT( "<Option object_output=\"obj\\Debug\\\" />\r\n" ) );
	buf->Append( wxT( "<Option type=\"0\" />\r\n" ) );
	buf->Append( wxT( "<Option create_hex=\"1\" />\r\n" ) );
	buf->Append( wxT( "<Option compiler=\"armgcc_eb\" />\r\n" ) );
	buf->Append( wxT( "<Option projectDeviceOptionsRelation=\"0\" />\r\n" ) );
	buf->Append( wxT( "<Compiler>\r\n" ) );
	buf->Append( wxT( "<Add option=\"-Wall\" />\r\n" ) );
	buf->Append( wxT( "<Add option=\"-fdata-sections\" />\r\n" ) );
	buf->Append( wxT( "<Add option=\"-ffunction-sections\" />\r\n" ) );
	buf->Append( wxT( "<Add option=\"-O0\" />\r\n" ) );
	buf->Append( wxT( "<Add option=\"-g3\" />\r\n" ) );
	buf->Append( wxT( "</Compiler>\r\n" ) );
	buf->Append( wxT( "<Cpp>\r\n" ) );
	buf->Append( wxT( "<Add option=\"-Wall\" />\r\n" ) );
	buf->Append( wxT( "<Add option=\"-fdata-sections\" />\r\n" ) );
	buf->Append( wxT( "<Add option=\"-ffunction-sections\" />\r\n" ) );
	buf->Append( wxT( "<Add option=\"-O0\" />\r\n" ) );
	buf->Append( wxT( "<Add option=\"-g3\" />\r\n" ) );
	buf->Append( wxT( "</Cpp>\r\n" ) );
	buf->Append( wxT( "<Assembler>\r\n" ) );
	buf->Append( wxT( "<Add option=\"-Wa,--gdwarf-2\" />\r\n" ) );
	buf->Append( wxT( "</Assembler>\r\n" ) );
	buf->Append( wxT( "<Linker>\r\n" ) );
	buf->Append( wxT( "<Add option=\"-u _scanf_float\" />\r\n" ) );
	buf->Append( wxT( "<Add option=\"-u _printf_float\" />\r\n" ) );
	buf->Append( wxT( "<Add option=\"-eb_use_mon\" />\r\n" ) );
	buf->Append( wxT( "<Add option=\"-Wl,--gc-sections\" />\r\n" ) );
	buf->Append( wxT( "</Linker>\r\n" ) );
	buf->Append( wxT( "</Target>\r\n" ) );
	buf->Append( wxT( "<Target title=\"Release\">\r\n" ) );
	buf->Append( wxT( "<Option output=\"bin\\Release\\" ) + prj_name + wxT( ".elf\" />\r\n" ) );
	buf->Append( wxT( "<Option object_output=\"obj\\Release\\\" />\r\n" ) );
	buf->Append( wxT( "<Option type=\"0\" />\r\n" ) );
	buf->Append( wxT( "<Option create_hex=\"1\" />\r\n" ) );
	buf->Append( wxT( "<Option compiler=\"armgcc_eb\" />\r\n" ) );
	buf->Append( wxT( "<Option projectDeviceOptionsRelation=\"0\" />\r\n" ) );
	buf->Append( wxT( "<Compiler>\r\n" ) );
	buf->Append( wxT( "<Add option=\"-Wextra\" />\r\n" ) );
	buf->Append( wxT( "<Add option=\"-Wall\" />\r\n" ) );
	buf->Append( wxT( "<Add option=\"-fdata-sections\" />\r\n" ) );
	buf->Append( wxT( "<Add option=\"-ffunction-sections\" />\r\n" ) );
	buf->Append( wxT( "<Add option=\"-Os\" />\r\n" ) );
	buf->Append( wxT( "<Add symbol=\"USE_STDPERIPH_DRIVER\" />\r\n" ) );
	buf->Append( wxT( "<Add symbol=\"STM32F10X_MD\" />\r\n" ) );
	buf->Append( wxT( "<Add symbol=\"GCC\" />\r\n" ) );
	buf->Append( wxT( "</Compiler>\r\n" ) );
	buf->Append( wxT( "<Cpp>\r\n" ) );
	buf->Append( wxT( "<Add option=\"-fdata-sections\" />\r\n" ) );
	buf->Append( wxT( "<Add option=\"-ffunction-sections\" />\r\n" ) );
	buf->Append( wxT( "<Add option=\"-Os\" />\r\n" ) );
	buf->Append( wxT( "<Add option=\"-g2\" />\r\n" ) );
	buf->Append( wxT( "</Cpp>\r\n" ) );
	buf->Append( wxT( "<Assembler>\r\n" ) );
	buf->Append( wxT( "<Add option=\"-Wa,--no-warn\" />\r\n" ) );
	buf->Append( wxT( "</Assembler>\r\n" ) );
	buf->Append( wxT( "<Linker>\r\n" ) );
	buf->Append( wxT( "<Add option=\"-u _scanf_float\" />\r\n" ) );
	buf->Append( wxT( "<Add option=\"-u _printf_float\" />\r\n" ) );
	buf->Append( wxT( "<Add option=\"-Wl,--cref\" />\r\n" ) );
	buf->Append( wxT( "<Add option=\"-Wl,--gc-sections\" />\r\n" ) );
	buf->Append( wxT( "</Linker>\r\n" ) );
	buf->Append( wxT( "</Target>\r\n" ) );
	buf->Append( wxT( "</Build>\r\n" ) );
	buf->Append( wxT( "<Device>\r\n" ) );
	buf->Append( wxT( "<Add option=\"$device=cortex-m3\" />\r\n" ) );
	buf->Append( wxT( "<Add option=\"$stack=0x0100\" />\r\n" ) );
	buf->Append( wxT( "<Add option=\"$heap=0x0000\" />\r\n" ) );
	buf->Append( wxT( "<Add option=\"$lscript=./stm32f103c8_flash.ld\" />\r\n" ) );
	buf->Append( wxT( "</Device>\r\n" ) );
	buf->Append( wxT( "<Compiler>\r\n" ) );
	buf->Append( wxT( "<Add option=\"-mfloat-abi=soft\" />\r\n" ) );
	buf->Append( wxT( "<Add option=\"-fno-strict-aliasing\" />\r\n" ) );
	buf->Append( wxT( "<Add symbol=\"STM32F103C8\" />\r\n" ) );
	buf->Append( wxT( "<Add symbol=\"STM32F10X_MD\" />\r\n" ) );
	buf->Append( wxT( "<Add symbol=\"USE_STDPERIPH_DRIVER\" />\r\n" ) );
	buf->Append( wxT( "<Add directory=\".\\inc\" />\r\n" ) );
	buf->Append( wxT( "<Add directory=\".\\src\" />\r\n" ) );
	buf->Append( wxT( "<Add directory=\".\\cmsis\" />\r\n" ) );
	buf->Append( wxT( "<Add directory=\".\\SPL\\inc\" />\r\n" ) );
	buf->Append( wxT( "<Add directory=\".\\SPL\\src\" />\r\n" ) );
	buf->Append( wxT( "</Compiler>\r\n" ) );
	buf->Append( wxT( "<Linker>\r\n" ) );
	buf->Append( wxT( "<Add option=\"-eb_start_files\" />\r\n" ) );
	buf->Append( wxT( "<Add option=\"-eb_lib=n\" />\r\n" ) );
	buf->Append( wxT( "</Linker>\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"cmsis_gtk\\core_cm3.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"cmsis_gtk\\core_cmFunc.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"cmsis_gtk\\core_cmInstr.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"cmsis_gtk\\stm32f10x.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"cmsis_gtk\\system_stm32f10x.c\">\r\n" ) );
	buf->Append( wxT( "<Option compilerVar=\"CC\" />\r\n" ) );
	buf->Append( wxT( "</Unit>\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"cmsis_gtk\\system_stm32f10x.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"main\\main.c\">\r\n" ) );
	buf->Append( wxT( "<Option compilerVar=\"CC\" />\r\n" ) );
	buf->Append( wxT( "</Unit>\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"main\\mx_cli.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"main\\mx_init.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"main\\mx_misc.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"main\\mx_spi.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"main\\readme.md\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"main\\start_ebp\\startup_stm32f10x_md.S\">\r\n" ) );
	buf->Append( wxT( "<Option compilerVar=\"CC\" />\r\n" ) );
	buf->Append( wxT( "</Unit>\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"spl\\inc\\misc.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"spl\\inc\\stm32f10x_adc.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"spl\\inc\\stm32f10x_bkp.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"spl\\inc\\stm32f10x_can.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"spl\\inc\\stm32f10x_cec.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"spl\\inc\\stm32f10x_crc.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"spl\\inc\\stm32f10x_dac.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"spl\\inc\\stm32f10x_dbgmcu.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"spl\\inc\\stm32f10x_dma.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"spl\\inc\\stm32f10x_exti.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"spl\\inc\\stm32f10x_flash.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"spl\\inc\\stm32f10x_fsmc.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"spl\\inc\\stm32f10x_gpio.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"spl\\inc\\stm32f10x_i2c.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"spl\\inc\\stm32f10x_iwdg.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"spl\\inc\\stm32f10x_pwr.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"spl\\inc\\stm32f10x_rcc.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"spl\\inc\\stm32f10x_rtc.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"spl\\inc\\stm32f10x_sdio.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"spl\\inc\\stm32f10x_spi.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"spl\\inc\\stm32f10x_tim.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"spl\\inc\\stm32f10x_usart.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"spl\\inc\\stm32f10x_wwdg.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"spl\\inc_ebp\\stm32f10x_conf.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"spl\\src\\misc.c\">\r\n" ) );
	buf->Append( wxT( "<Option compilerVar=\"CC\" />\r\n" ) );
	buf->Append( wxT( "</Unit>\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"spl\\src\\stm32f10x_adc.c\">\r\n" ) );
	buf->Append( wxT( "<Option compilerVar=\"CC\" />\r\n" ) );
	buf->Append( wxT( "</Unit>\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"spl\\src\\stm32f10x_bkp.c\">\r\n" ) );
	buf->Append( wxT( "<Option compilerVar=\"CC\" />\r\n" ) );
	buf->Append( wxT( "</Unit>\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"spl\\src\\stm32f10x_can.c\">\r\n" ) );
	buf->Append( wxT( "<Option compilerVar=\"CC\" />\r\n" ) );
	buf->Append( wxT( "</Unit>\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"spl\\src\\stm32f10x_cec.c\">\r\n" ) );
	buf->Append( wxT( "<Option compilerVar=\"CC\" />\r\n" ) );
	buf->Append( wxT( "</Unit>\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"spl\\src\\stm32f10x_crc.c\">\r\n" ) );
	buf->Append( wxT( "<Option compilerVar=\"CC\" />\r\n" ) );
	buf->Append( wxT( "</Unit>\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"spl\\src\\stm32f10x_dac.c\">\r\n" ) );
	buf->Append( wxT( "<Option compilerVar=\"CC\" />\r\n" ) );
	buf->Append( wxT( "</Unit>\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"spl\\src\\stm32f10x_dbgmcu.c\">\r\n" ) );
	buf->Append( wxT( "<Option compilerVar=\"CC\" />\r\n" ) );
	buf->Append( wxT( "</Unit>\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"spl\\src\\stm32f10x_dma.c\">\r\n" ) );
	buf->Append( wxT( "<Option compilerVar=\"CC\" />\r\n" ) );
	buf->Append( wxT( "</Unit>\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"spl\\src\\stm32f10x_exti.c\">\r\n" ) );
	buf->Append( wxT( "<Option compilerVar=\"CC\" />\r\n" ) );
	buf->Append( wxT( "</Unit>\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"spl\\src\\stm32f10x_flash.c\">\r\n" ) );
	buf->Append( wxT( "<Option compilerVar=\"CC\" />\r\n" ) );
	buf->Append( wxT( "</Unit>\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"spl\\src\\stm32f10x_fsmc.c\">\r\n" ) );
	buf->Append( wxT( "<Option compilerVar=\"CC\" />\r\n" ) );
	buf->Append( wxT( "</Unit>\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"spl\\src\\stm32f10x_gpio.c\">\r\n" ) );
	buf->Append( wxT( "<Option compilerVar=\"CC\" />\r\n" ) );
	buf->Append( wxT( "</Unit>\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"spl\\src\\stm32f10x_i2c.c\">\r\n" ) );
	buf->Append( wxT( "<Option compilerVar=\"CC\" />\r\n" ) );
	buf->Append( wxT( "</Unit>\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"spl\\src\\stm32f10x_iwdg.c\">\r\n" ) );
	buf->Append( wxT( "<Option compilerVar=\"CC\" />\r\n" ) );
	buf->Append( wxT( "</Unit>\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"spl\\src\\stm32f10x_pwr.c\">\r\n" ) );
	buf->Append( wxT( "<Option compilerVar=\"CC\" />\r\n" ) );
	buf->Append( wxT( "</Unit>\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"spl\\src\\stm32f10x_rcc.c\">\r\n" ) );
	buf->Append( wxT( "<Option compilerVar=\"CC\" />\r\n" ) );
	buf->Append( wxT( "</Unit>\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"spl\\src\\stm32f10x_rtc.c\">\r\n" ) );
	buf->Append( wxT( "<Option compilerVar=\"CC\" />\r\n" ) );
	buf->Append( wxT( "</Unit>\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"spl\\src\\stm32f10x_sdio.c\">\r\n" ) );
	buf->Append( wxT( "<Option compilerVar=\"CC\" />\r\n" ) );
	buf->Append( wxT( "</Unit>\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"spl\\src\\stm32f10x_spi.c\">\r\n" ) );
	buf->Append( wxT( "<Option compilerVar=\"CC\" />\r\n" ) );
	buf->Append( wxT( "</Unit>\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"spl\\src\\stm32f10x_tim.c\">\r\n" ) );
	buf->Append( wxT( "<Option compilerVar=\"CC\" />\r\n" ) );
	buf->Append( wxT( "</Unit>\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"spl\\src\\stm32f10x_usart.c\">\r\n" ) );
	buf->Append( wxT( "<Option compilerVar=\"CC\" />\r\n" ) );
	buf->Append( wxT( "</Unit>\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"spl\\src\\stm32f10x_wwdg.c\">\r\n" ) );
	buf->Append( wxT( "<Option compilerVar=\"CC\" />\r\n" ) );
	buf->Append( wxT( "</Unit>\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"stm32f103c8_flash.ld\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"stm32f103c8_sram.ld\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"usb\\inc\\hw_config.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"usb\\inc\\stm32_it.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"usb\\inc\\usb_conf.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"usb\\inc\\usb_desc.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"usb\\inc\\usb_istr.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"usb\\inc\\usb_prop.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"usb\\inc\\usb_pwr.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"usb\\src\\hw_config.c\">\r\n" ) );
	buf->Append( wxT( "<Option compilerVar=\"CC\" />\r\n" ) );
	buf->Append( wxT( "</Unit>\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"usb\\src\\stm32_it.c\">\r\n" ) );
	buf->Append( wxT( "<Option compilerVar=\"CC\" />\r\n" ) );
	buf->Append( wxT( "</Unit>\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"usb\\src\\usb_desc.c\">\r\n" ) );
	buf->Append( wxT( "<Option compilerVar=\"CC\" />\r\n" ) );
	buf->Append( wxT( "</Unit>\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"usb\\src\\usb_istr.c\">\r\n" ) );
	buf->Append( wxT( "<Option compilerVar=\"CC\" />\r\n" ) );
	buf->Append( wxT( "</Unit>\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"usb\\src\\usb_prop.c\">\r\n" ) );
	buf->Append( wxT( "<Option compilerVar=\"CC\" />\r\n" ) );
	buf->Append( wxT( "</Unit>\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"usb\\src\\usb_pwr.c\">\r\n" ) );
	buf->Append( wxT( "<Option compilerVar=\"CC\" />\r\n" ) );
	buf->Append( wxT( "</Unit>\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"usb\\usb_fs\\inc\\usb_core.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"usb\\usb_fs\\inc\\usb_def.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"usb\\usb_fs\\inc\\usb_init.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"usb\\usb_fs\\inc\\usb_int.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"usb\\usb_fs\\inc\\usb_lib.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"usb\\usb_fs\\inc\\usb_mem.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"usb\\usb_fs\\inc\\usb_regs.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"usb\\usb_fs\\inc\\usb_sil.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"usb\\usb_fs\\inc\\usb_type.h\" />\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"usb\\usb_fs\\src\\usb_core.c\">\r\n" ) );
	buf->Append( wxT( "<Option compilerVar=\"CC\" />\r\n" ) );
	buf->Append( wxT( "</Unit>\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"usb\\usb_fs\\src\\usb_init.c\">\r\n" ) );
	buf->Append( wxT( "<Option compilerVar=\"CC\" />\r\n" ) );
	buf->Append( wxT( "</Unit>\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"usb\\usb_fs\\src\\usb_int.c\">\r\n" ) );
	buf->Append( wxT( "<Option compilerVar=\"CC\" />\r\n" ) );
	buf->Append( wxT( "</Unit>\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"usb\\usb_fs\\src\\usb_mem.c\">\r\n" ) );
	buf->Append( wxT( "<Option compilerVar=\"CC\" />\r\n" ) );
	buf->Append( wxT( "</Unit>\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"usb\\usb_fs\\src\\usb_regs.c\">\r\n" ) );
	buf->Append( wxT( "<Option compilerVar=\"CC\" />\r\n" ) );
	buf->Append( wxT( "</Unit>\r\n" ) );
	buf->Append( wxT( "<Unit filename=\"usb\\usb_fs\\src\\usb_sil.c\">\r\n" ) );
	buf->Append( wxT( "<Option compilerVar=\"CC\" />\r\n" ) );
	buf->Append( wxT( "</Unit>\r\n" ) );
	buf->Append( wxT( "<Extensions>\r\n" ) );
	buf->Append( wxT( "<code_completion />\r\n" ) );
	buf->Append( wxT( "<debugger>\r\n" ) );
	buf->Append( wxT( "<target_debugging_settings target=\"Release\" active_interface=\"ST-link\">\r\n" ) );
	buf->Append( wxT( "<debug_interface interface_id=\"ST-link\" ip_address=\"localhost\" ip_port=\"4242\" path=\"${EMBITZ}\\share\\contrib\" executable=\"STLinkGDB.exe\" description=\"\" dont_start_server=\"false\" backoff_time=\"1000\" options=\"0\" reg_filter=\"0\" active_family=\"STMicroelectronics\" gdb_before_conn=\"\" gdb_after_conn=\"\">\r\n" ) );
	buf->Append( wxT( "<family_options family_id=\"STMicroelectronics\">\r\n" ) );
	buf->Append( wxT( "<option opt_id=\"ID_JTAG_SWD\" opt_value=\"swd\" />\r\n" ) );
	buf->Append( wxT( "<option opt_id=\"ID_VECTOR_START\" opt_value=\"0x08000000\" />\r\n" ) );
	buf->Append( wxT( "<option opt_id=\"ID_RESET_TYPE\" opt_value=\"System\" />\r\n" ) );
	buf->Append( wxT( "<option opt_id=\"ID_LOAD_PROGRAM\" opt_value=\"1\" />\r\n" ) );
	buf->Append( wxT( "<option opt_id=\"ID_SEMIHOST_CHECK\" opt_value=\"0\" />\r\n" ) );
	buf->Append( wxT( "<option opt_id=\"ID_RAM_EXEC\" opt_value=\"0\" />\r\n" ) );
	buf->Append( wxT( "<option opt_id=\"ID_VEC_TABLE\" opt_value=\"1\" />\r\n" ) );
	buf->Append( wxT( "<option opt_id=\"ID_DONT_CONN_RESET\" opt_value=\"0\" />\r\n" ) );
	buf->Append( wxT( "<option opt_id=\"ID_ALL_MODE_DEBUG\" opt_value=\"1\" />\r\n" ) );
	buf->Append( wxT( "<option opt_id=\"ID_DEV_ADDR\" opt_value=\"\" />\r\n" ) );
	buf->Append( wxT( "<option opt_id=\"ID_VERBOSE_LEVEL\" opt_value=\"3\" />\r\n" ) );
	buf->Append( wxT( "</family_options>\r\n" ) );
	buf->Append( wxT( "</debug_interface>\r\n" ) );
	buf->Append( wxT( "</target_debugging_settings>\r\n" ) );
	buf->Append( wxT( "<target_debugging_settings target=\"Debug\" active_interface=\"ST-link\">\r\n" ) );
	buf->Append( wxT( "<debug_interface interface_id=\"ST-link\" ip_address=\"localhost\" ip_port=\"4242\" path=\"${EMBITZ}\\share\\contrib\" executable=\"STLinkGDB.exe\" description=\"\" dont_start_server=\"false\" backoff_time=\"1000\" options=\"0\" reg_filter=\"0\" active_family=\"STMicroelectronics\" gdb_before_conn=\"\" gdb_after_conn=\"\">\r\n" ) );
	buf->Append( wxT( "<family_options family_id=\"STMicroelectronics\">\r\n" ) );
	buf->Append( wxT( "<option opt_id=\"ID_JTAG_SWD\" opt_value=\"swd\" />\r\n" ) );
	buf->Append( wxT( "<option opt_id=\"ID_VECTOR_START\" opt_value=\"0x08000000\" />\r\n" ) );
	buf->Append( wxT( "<option opt_id=\"ID_RESET_TYPE\" opt_value=\"System\" />\r\n" ) );
	buf->Append( wxT( "<option opt_id=\"ID_LOAD_PROGRAM\" opt_value=\"1\" />\r\n" ) );
	buf->Append( wxT( "<option opt_id=\"ID_SEMIHOST_CHECK\" opt_value=\"0\" />\r\n" ) );
	buf->Append( wxT( "<option opt_id=\"ID_RAM_EXEC\" opt_value=\"0\" />\r\n" ) );
	buf->Append( wxT( "<option opt_id=\"ID_VEC_TABLE\" opt_value=\"1\" />\r\n" ) );
	buf->Append( wxT( "<option opt_id=\"ID_DONT_CONN_RESET\" opt_value=\"0\" />\r\n" ) );
	buf->Append( wxT( "<option opt_id=\"ID_ALL_MODE_DEBUG\" opt_value=\"1\" />\r\n" ) );
	buf->Append( wxT( "<option opt_id=\"ID_DEV_ADDR\" opt_value=\"\" />\r\n" ) );
	buf->Append( wxT( "<option opt_id=\"ID_VERBOSE_LEVEL\" opt_value=\"3\" />\r\n" ) );
	buf->Append( wxT( "</family_options>\r\n" ) );
	buf->Append( wxT( "</debug_interface>\r\n" ) );
	buf->Append( wxT( "</target_debugging_settings>\r\n" ) );
	buf->Append( wxT( "</debugger>\r\n" ) );
	buf->Append( wxT( "<envvars />\r\n" ) );
	buf->Append( wxT( "</Extensions>\r\n" ) );
	buf->Append( wxT( "</Project>\r\n" ) );
	buf->Append( wxT( "</EmBitz_project_file>\r\n" ) );
}

void Set_EBP_lay_stm32f103c8( wxString *buf, wxString prj_name )
{
*buf = wxEmptyString;
buf->Append( wxT( "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\" ?>\r\n" ) );
buf->Append( wxT( "<EmBitz_layout_file>\r\n" ) );
buf->Append( wxT( "<ActiveTarget name=\"Release\" />\r\n" ) );
buf->Append( wxT( "<File name=\"main\\main.c\" open=\"1\" top=\"1\" tabpos=\"1\" split=\"0\" active=\"1\" splitpos=\"0\" zoom_1=\"0\" zoom_2=\"0\">\r\n" ) );
buf->Append( wxT( "<Cursor>\r\n" ) );
buf->Append( wxT( "<Cursor1 position=\"591\" topLine=\"0\" />\r\n" ) );
buf->Append( wxT( "</Cursor>\r\n" ) );
buf->Append( wxT( "</File>\r\n" ) );
buf->Append( wxT( "<File name=\"spl\\inc\\misc.h\" open=\"0\" top=\"0\" tabpos=\"0\" split=\"0\" active=\"1\" splitpos=\"0\" zoom_1=\"0\" zoom_2=\"0\">\r\n" ) );
buf->Append( wxT( "<Cursor>\r\n" ) );
buf->Append( wxT( "<Cursor1 position=\"1337\" topLine=\"30\" />\r\n" ) );
buf->Append( wxT( "</Cursor>\r\n" ) );
buf->Append( wxT( "</File>\r\n" ) );
buf->Append( wxT( "</EmBitz_layout_file>\r\n" ) );
}

void Set_ln_stm32f103c8_flash( wxString *buf )
{
	*buf = wxEmptyString;
	buf->Append( wxT( "/* ------------------------------------------------------------------------\r\n" ) );
	buf->Append( wxT( " *    Linker script for running in internal FLASH on the STM32F103C8\r\n" ) );
	buf->Append( wxT( " * ------------------------------------------------------------------------ */\r\n" ) );
	buf->Append( wxT( "\r\n" ) );
	buf->Append( wxT( "OUTPUT_FORMAT(\"elf32-littlearm\", \"elf32-littlearm\", \"elf32-littlearm\")\r\n" ) );
	buf->Append( wxT( "OUTPUT_ARCH(arm)\r\n" ) );
	buf->Append( wxT( "SEARCH_DIR(.)\r\n" ) );
	buf->Append( wxT( "\r\n" ) );
	buf->Append( wxT( "/* Memory Spaces Definitions */\r\n" ) );
	buf->Append( wxT( "MEMORY\r\n" ) );
	buf->Append( wxT( "{\r\n" ) );
	buf->Append( wxT( "    ROM  (rx) : ORIGIN = 0x08000000, LENGTH = 64K\r\n" ) );
	buf->Append( wxT( "    RAM (rwx) : ORIGIN = 0x20000000, LENGTH = 20K\r\n" ) );
	buf->Append( wxT( "}\r\n" ) );
	buf->Append( wxT( "\r\n" ) );
	buf->Append( wxT( "/* Linker script to place sections and symbol values. Should be used together\r\n" ) );
	buf->Append( wxT( " * with other linker script that defines memory regions FLASH and RAM.\r\n" ) );
	buf->Append( wxT( " * It references following symbols, which must be defined in code:\r\n" ) );
	buf->Append( wxT( " *   Reset_Handler : Entry of reset handler\r\n" ) );
	buf->Append( wxT( " * \r\n" ) );
	buf->Append( wxT( " * It defines following symbols, which code can use without definition:\r\n" ) );
	buf->Append( wxT( " *   __exidx_start\r\n" ) );
	buf->Append( wxT( " *   __exidx_end\r\n" ) );
	buf->Append( wxT( " *   __etext\r\n" ) );
	buf->Append( wxT( " *   __data_start__\r\n" ) );
	buf->Append( wxT( " *   __preinit_array_start\r\n" ) );
	buf->Append( wxT( " *   __preinit_array_end\r\n" ) );
	buf->Append( wxT( " *   __init_array_start\r\n" ) );
	buf->Append( wxT( " *   __init_array_end\r\n" ) );
	buf->Append( wxT( " *   __fini_array_start\r\n" ) );
	buf->Append( wxT( " *   __fini_array_end\r\n" ) );
	buf->Append( wxT( " *   __data_end__\r\n" ) );
	buf->Append( wxT( " *   __bss_start__\r\n" ) );
	buf->Append( wxT( " *   __bss_end__\r\n" ) );
	buf->Append( wxT( " *   __end__\r\n" ) );
	buf->Append( wxT( " *   end\r\n" ) );
	buf->Append( wxT( " *   __HeapLimit\r\n" ) );
	buf->Append( wxT( " *   __StackLimit\r\n" ) );
	buf->Append( wxT( " *   __StackTop\r\n" ) );
	buf->Append( wxT( " *   __stack\r\n" ) );
	buf->Append( wxT( " */\r\n" ) );
	buf->Append( wxT( "\r\n" ) );
	buf->Append( wxT( "\r\n" ) );
	buf->Append( wxT( "SECTIONS\r\n" ) );
	buf->Append( wxT( "{\r\n" ) );
	buf->Append( wxT( "	.text :\r\n" ) );
	buf->Append( wxT( "	{\r\n" ) );
	buf->Append( wxT( "		KEEP(*(.isr_vector))\r\n" ) );
	buf->Append( wxT( "		*(.text*)\r\n" ) );
	buf->Append( wxT( "\r\n" ) );
	buf->Append( wxT( "		KEEP(*(.init))\r\n" ) );
	buf->Append( wxT( "		KEEP(*(.fini))\r\n" ) );
	buf->Append( wxT( "\r\n" ) );
	buf->Append( wxT( "		/* .ctors */\r\n" ) );
	buf->Append( wxT( "		*crtbegin.o(.ctors)\r\n" ) );
	buf->Append( wxT( "		*crtbegin?.o(.ctors)\r\n" ) );
	buf->Append( wxT( "		*(EXCLUDE_FILE(*crtend?.o *crtend.o) .ctors)\r\n" ) );
	buf->Append( wxT( "		*(SORT(.ctors.*))\r\n" ) );
	buf->Append( wxT( "		*(.ctors)\r\n" ) );
	buf->Append( wxT( "\r\n" ) );
	buf->Append( wxT( "		/* .dtors */\r\n" ) );
	buf->Append( wxT( " 		*crtbegin.o(.dtors)\r\n" ) );
	buf->Append( wxT( " 		*crtbegin?.o(.dtors)\r\n" ) );
	buf->Append( wxT( " 		*(EXCLUDE_FILE(*crtend?.o *crtend.o) .dtors)\r\n" ) );
	buf->Append( wxT( " 		*(SORT(.dtors.*))\r\n" ) );
	buf->Append( wxT( " 		*(.dtors)\r\n" ) );
	buf->Append( wxT( "\r\n" ) );
	buf->Append( wxT( "		*(.rodata*)\r\n" ) );
	buf->Append( wxT( "\r\n" ) );
	buf->Append( wxT( "		KEEP(*(.eh_frame*))\r\n" ) );
	buf->Append( wxT( "	} > ROM\r\n" ) );
	buf->Append( wxT( "\r\n" ) );
	buf->Append( wxT( "	.ARM.extab : \r\n" ) );
	buf->Append( wxT( "	{\r\n" ) );
	buf->Append( wxT( "		*(.ARM.extab* .gnu.linkonce.armextab.*)\r\n" ) );
	buf->Append( wxT( "	} > ROM\r\n" ) );
	buf->Append( wxT( "\r\n" ) );
	buf->Append( wxT( "	__exidx_start = .;\r\n" ) );
	buf->Append( wxT( "	.ARM.exidx :\r\n" ) );
	buf->Append( wxT( "	{\r\n" ) );
	buf->Append( wxT( "		*(.ARM.exidx* .gnu.linkonce.armexidx.*)\r\n" ) );
	buf->Append( wxT( "	} > ROM\r\n" ) );
	buf->Append( wxT( "	__exidx_end = .;\r\n" ) );
	buf->Append( wxT( "\r\n" ) );
	buf->Append( wxT( "	__etext = .;\r\n" ) );
	buf->Append( wxT( "		\r\n" ) );
	buf->Append( wxT( "	.data : AT (__etext)\r\n" ) );
	buf->Append( wxT( "	{\r\n" ) );
	buf->Append( wxT( "		__data_start__ = .;\r\n" ) );
	buf->Append( wxT( "		*(vtable)\r\n" ) );
	buf->Append( wxT( "		*(.data*)\r\n" ) );
	buf->Append( wxT( "\r\n" ) );
	buf->Append( wxT( "		. = ALIGN(4);\r\n" ) );
	buf->Append( wxT( "		/* preinit data */\r\n" ) );
	buf->Append( wxT( "		PROVIDE_HIDDEN (__preinit_array_start = .);\r\n" ) );
	buf->Append( wxT( "		KEEP(*(.preinit_array))\r\n" ) );
	buf->Append( wxT( "		PROVIDE_HIDDEN (__preinit_array_end = .);\r\n" ) );
	buf->Append( wxT( "\r\n" ) );
	buf->Append( wxT( "		. = ALIGN(4);\r\n" ) );
	buf->Append( wxT( "		/* init data */\r\n" ) );
	buf->Append( wxT( "		PROVIDE_HIDDEN (__init_array_start = .);\r\n" ) );
	buf->Append( wxT( "		KEEP(*(SORT(.init_array.*)))\r\n" ) );
	buf->Append( wxT( "		KEEP(*(.init_array))\r\n" ) );
	buf->Append( wxT( "		PROVIDE_HIDDEN (__init_array_end = .);\r\n" ) );
	buf->Append( wxT( "\r\n" ) );
	buf->Append( wxT( "\r\n" ) );
	buf->Append( wxT( "		. = ALIGN(4);\r\n" ) );
	buf->Append( wxT( "		/* finit data */\r\n" ) );
	buf->Append( wxT( "		PROVIDE_HIDDEN (__fini_array_start = .);\r\n" ) );
	buf->Append( wxT( "		KEEP(*(SORT(.fini_array.*)))\r\n" ) );
	buf->Append( wxT( "		KEEP(*(.fini_array))\r\n" ) );
	buf->Append( wxT( "		PROVIDE_HIDDEN (__fini_array_end = .);\r\n" ) );
	buf->Append( wxT( "\r\n" ) );
	buf->Append( wxT( "		. = ALIGN(4);\r\n" ) );
	buf->Append( wxT( "		/* All data end */\r\n" ) );
	buf->Append( wxT( "		__data_end__ = .;\r\n" ) );
	buf->Append( wxT( "\r\n" ) );
	buf->Append( wxT( "	} > RAM\r\n" ) );
	buf->Append( wxT( "\r\n" ) );
	buf->Append( wxT( "	.bss (NOLOAD):\r\n" ) );
	buf->Append( wxT( "	{\r\n" ) );
	buf->Append( wxT( "		__bss_start__ = .;\r\n" ) );
	buf->Append( wxT( "		*(.bss*)\r\n" ) );
	buf->Append( wxT( "		*(COMMON)\r\n" ) );
	buf->Append( wxT( "		__bss_end__ = .;\r\n" ) );
	buf->Append( wxT( "	} > RAM\r\n" ) );
	buf->Append( wxT( "	\r\n" ) );
	buf->Append( wxT( "	.heap (NOLOAD):\r\n" ) );
	buf->Append( wxT( "	{\r\n" ) );
	buf->Append( wxT( "		__end__ = .;\r\n" ) );
	buf->Append( wxT( "		end = __end__;\r\n" ) );
	buf->Append( wxT( "		*(.heap*)\r\n" ) );
	buf->Append( wxT( "		__HeapLimit = .;\r\n" ) );
	buf->Append( wxT( "	} > RAM\r\n" ) );
	buf->Append( wxT( "\r\n" ) );
	buf->Append( wxT( "	/* .stack_dummy section doesn't contains any symbols. It is only\r\n" ) );
	buf->Append( wxT( "	 * used for linker to calculate size of stack sections, and assign\r\n" ) );
	buf->Append( wxT( "	 * values to stack symbols later */\r\n" ) );
	buf->Append( wxT( "	.stack_dummy (NOLOAD):\r\n" ) );
	buf->Append( wxT( "	{\r\n" ) );
	buf->Append( wxT( "		*(.stack)\r\n" ) );
	buf->Append( wxT( "	} > RAM\r\n" ) );
	buf->Append( wxT( "\r\n" ) );
	buf->Append( wxT( "	/* Set stack top to end of RAM, and stack limit move down by\r\n" ) );
	buf->Append( wxT( "	 * size of stack_dummy section */\r\n" ) );
	buf->Append( wxT( "	__StackTop = ORIGIN(RAM) + LENGTH(RAM);\r\n" ) );
	buf->Append( wxT( "	__StackLimit = __StackTop - SIZEOF(.stack_dummy);\r\n" ) );
	buf->Append( wxT( "	PROVIDE(__stack = __StackTop);\r\n" ) );
	buf->Append( wxT( "	\r\n" ) );
	buf->Append( wxT( "	/* Check if data + heap + stack exceeds RAM limit */\r\n" ) );
	buf->Append( wxT( "	ASSERT(__StackLimit >= __HeapLimit, \"region RAM overflowed with stack\")\r\n" ) );
	buf->Append( wxT( "}\r\n" ) );
}

void Set_ln_stm32f103c8_sram( wxString *buf )
{
	*buf = wxEmptyString;
	buf->Append( wxT( "/* ------------------------------------------------------------------------\r\n" ) );
	buf->Append( wxT( " *    Linker script for running in internal SRAM on the STM32F103C8\r\n" ) );
	buf->Append( wxT( " * ------------------------------------------------------------------------ */\r\n" ) );
	buf->Append( wxT( "\r\n" ) );
	buf->Append( wxT( "OUTPUT_FORMAT(\"elf32-littlearm\", \"elf32-littlearm\", \"elf32-littlearm\")\r\n" ) );
	buf->Append( wxT( "OUTPUT_ARCH(arm)\r\n" ) );
	buf->Append( wxT( "SEARCH_DIR(.)\r\n" ) );
	buf->Append( wxT( "\r\n" ) );
	buf->Append( wxT( "/* Memory Spaces Definitions */\r\n" ) );
	buf->Append( wxT( "MEMORY\r\n" ) );
	buf->Append( wxT( "{\r\n" ) );
	buf->Append( wxT( "    ROM  (rx) : ORIGIN = 0x08000000, LENGTH = 64K\r\n" ) );
	buf->Append( wxT( "    RAM (rwx) : ORIGIN = 0x20000000, LENGTH = 20K\r\n" ) );
	buf->Append( wxT( "}\r\n" ) );
	buf->Append( wxT( "\r\n" ) );
	buf->Append( wxT( "/* Linker script to place sections and symbol values. Should be used together\r\n" ) );
	buf->Append( wxT( " * with other linker script that defines memory regions FLASH and RAM.\r\n" ) );
	buf->Append( wxT( " * It references following symbols, which must be defined in code:\r\n" ) );
	buf->Append( wxT( " *   Reset_Handler : Entry of reset handler\r\n" ) );
	buf->Append( wxT( " * \r\n" ) );
	buf->Append( wxT( " * It defines following symbols, which code can use without definition:\r\n" ) );
	buf->Append( wxT( " *   __exidx_start\r\n" ) );
	buf->Append( wxT( " *   __exidx_end\r\n" ) );
	buf->Append( wxT( " *   __etext\r\n" ) );
	buf->Append( wxT( " *   __data_start__\r\n" ) );
	buf->Append( wxT( " *   __preinit_array_start\r\n" ) );
	buf->Append( wxT( " *   __preinit_array_end\r\n" ) );
	buf->Append( wxT( " *   __init_array_start\r\n" ) );
	buf->Append( wxT( " *   __init_array_end\r\n" ) );
	buf->Append( wxT( " *   __fini_array_start\r\n" ) );
	buf->Append( wxT( " *   __fini_array_end\r\n" ) );
	buf->Append( wxT( " *   __data_end__\r\n" ) );
	buf->Append( wxT( " *   __bss_start__\r\n" ) );
	buf->Append( wxT( " *   __bss_end__\r\n" ) );
	buf->Append( wxT( " *   __end__\r\n" ) );
	buf->Append( wxT( " *   end\r\n" ) );
	buf->Append( wxT( " *   __HeapLimit\r\n" ) );
	buf->Append( wxT( " *   __StackLimit\r\n" ) );
	buf->Append( wxT( " *   __StackTop\r\n" ) );
	buf->Append( wxT( " *   __stack\r\n" ) );
	buf->Append( wxT( " */\r\n" ) );
	buf->Append( wxT( "\r\n" ) );
	buf->Append( wxT( "\r\n" ) );
	buf->Append( wxT( "SECTIONS\r\n" ) );
	buf->Append( wxT( "{\r\n" ) );
	buf->Append( wxT( "	.text :\r\n" ) );
	buf->Append( wxT( "	{\r\n" ) );
	buf->Append( wxT( "		KEEP(*(.isr_vector))\r\n" ) );
	buf->Append( wxT( "		*(.text*)\r\n" ) );
	buf->Append( wxT( "\r\n" ) );
	buf->Append( wxT( "		KEEP(*(.init))\r\n" ) );
	buf->Append( wxT( "		KEEP(*(.fini))\r\n" ) );
	buf->Append( wxT( "\r\n" ) );
	buf->Append( wxT( "		/* .ctors */\r\n" ) );
	buf->Append( wxT( "		*crtbegin.o(.ctors)\r\n" ) );
	buf->Append( wxT( "		*crtbegin?.o(.ctors)\r\n" ) );
	buf->Append( wxT( "		*(EXCLUDE_FILE(*crtend?.o *crtend.o) .ctors)\r\n" ) );
	buf->Append( wxT( "		*(SORT(.ctors.*))\r\n" ) );
	buf->Append( wxT( "		*(.ctors)\r\n" ) );
	buf->Append( wxT( "\r\n" ) );
	buf->Append( wxT( "		/* .dtors */\r\n" ) );
	buf->Append( wxT( " 		*crtbegin.o(.dtors)\r\n" ) );
	buf->Append( wxT( " 		*crtbegin?.o(.dtors)\r\n" ) );
	buf->Append( wxT( " 		*(EXCLUDE_FILE(*crtend?.o *crtend.o) .dtors)\r\n" ) );
	buf->Append( wxT( " 		*(SORT(.dtors.*))\r\n" ) );
	buf->Append( wxT( " 		*(.dtors)\r\n" ) );
	buf->Append( wxT( "\r\n" ) );
	buf->Append( wxT( "		*(.rodata*)\r\n" ) );
	buf->Append( wxT( "\r\n" ) );
	buf->Append( wxT( "		KEEP(*(.eh_frame*))\r\n" ) );
	buf->Append( wxT( "	} > RAM\r\n" ) );
	buf->Append( wxT( "\r\n" ) );
	buf->Append( wxT( "	.ARM.extab : \r\n" ) );
	buf->Append( wxT( "	{\r\n" ) );
	buf->Append( wxT( "		*(.ARM.extab* .gnu.linkonce.armextab.*)\r\n" ) );
	buf->Append( wxT( "	} > RAM\r\n" ) );
	buf->Append( wxT( "\r\n" ) );
	buf->Append( wxT( "	__exidx_start = .;\r\n" ) );
	buf->Append( wxT( "	.ARM.exidx :\r\n" ) );
	buf->Append( wxT( "	{\r\n" ) );
	buf->Append( wxT( "		*(.ARM.exidx* .gnu.linkonce.armexidx.*)\r\n" ) );
	buf->Append( wxT( "	} > RAM\r\n" ) );
	buf->Append( wxT( "	__exidx_end = .;\r\n" ) );
	buf->Append( wxT( "\r\n" ) );
	buf->Append( wxT( "	__etext = .;\r\n" ) );
	buf->Append( wxT( "		\r\n" ) );
	buf->Append( wxT( "	.data : AT (__etext)\r\n" ) );
	buf->Append( wxT( "	{\r\n" ) );
	buf->Append( wxT( "		__data_start__ = .;\r\n" ) );
	buf->Append( wxT( "		*(vtable)\r\n" ) );
	buf->Append( wxT( "		*(.data*)\r\n" ) );
	buf->Append( wxT( "\r\n" ) );
	buf->Append( wxT( "		. = ALIGN(4);\r\n" ) );
	buf->Append( wxT( "		/* preinit data */\r\n" ) );
	buf->Append( wxT( "		PROVIDE_HIDDEN (__preinit_array_start = .);\r\n" ) );
	buf->Append( wxT( "		KEEP(*(.preinit_array))\r\n" ) );
	buf->Append( wxT( "		PROVIDE_HIDDEN (__preinit_array_end = .);\r\n" ) );
	buf->Append( wxT( "\r\n" ) );
	buf->Append( wxT( "		. = ALIGN(4);\r\n" ) );
	buf->Append( wxT( "		/* init data */\r\n" ) );
	buf->Append( wxT( "		PROVIDE_HIDDEN (__init_array_start = .);\r\n" ) );
	buf->Append( wxT( "		KEEP(*(SORT(.init_array.*)))\r\n" ) );
	buf->Append( wxT( "		KEEP(*(.init_array))\r\n" ) );
	buf->Append( wxT( "		PROVIDE_HIDDEN (__init_array_end = .);\r\n" ) );
	buf->Append( wxT( "\r\n" ) );
	buf->Append( wxT( "\r\n" ) );
	buf->Append( wxT( "		. = ALIGN(4);\r\n" ) );
	buf->Append( wxT( "		/* finit data */\r\n" ) );
	buf->Append( wxT( "		PROVIDE_HIDDEN (__fini_array_start = .);\r\n" ) );
	buf->Append( wxT( "		KEEP(*(SORT(.fini_array.*)))\r\n" ) );
	buf->Append( wxT( "		KEEP(*(.fini_array))\r\n" ) );
	buf->Append( wxT( "		PROVIDE_HIDDEN (__fini_array_end = .);\r\n" ) );
	buf->Append( wxT( "\r\n" ) );
	buf->Append( wxT( "		. = ALIGN(4);\r\n" ) );
	buf->Append( wxT( "		/* All data end */\r\n" ) );
	buf->Append( wxT( "		__data_end__ = .;\r\n" ) );
	buf->Append( wxT( "\r\n" ) );
	buf->Append( wxT( "	} > RAM\r\n" ) );
	buf->Append( wxT( "\r\n" ) );
	buf->Append( wxT( "	.bss (NOLOAD):\r\n" ) );
	buf->Append( wxT( "	{\r\n" ) );
	buf->Append( wxT( "		__bss_start__ = .;\r\n" ) );
	buf->Append( wxT( "		*(.bss*)\r\n" ) );
	buf->Append( wxT( "		*(COMMON)\r\n" ) );
	buf->Append( wxT( "		__bss_end__ = .;\r\n" ) );
	buf->Append( wxT( "	} > RAM\r\n" ) );
	buf->Append( wxT( "	\r\n" ) );
	buf->Append( wxT( "	.heap (NOLOAD):\r\n" ) );
	buf->Append( wxT( "	{\r\n" ) );
	buf->Append( wxT( "		__end__ = .;\r\n" ) );
	buf->Append( wxT( "		end = __end__;\r\n" ) );
	buf->Append( wxT( "		*(.heap*)\r\n" ) );
	buf->Append( wxT( "		__HeapLimit = .;\r\n" ) );
	buf->Append( wxT( "	} > RAM\r\n" ) );
	buf->Append( wxT( "\r\n" ) );
	buf->Append( wxT( "	/* .stack_dummy section doesn't contains any symbols. It is only\r\n" ) );
	buf->Append( wxT( "	 * used for linker to calculate size of stack sections, and assign\r\n" ) );
	buf->Append( wxT( "	 * values to stack symbols later */\r\n" ) );
	buf->Append( wxT( "	.stack_dummy (NOLOAD):\r\n" ) );
	buf->Append( wxT( "	{\r\n" ) );
	buf->Append( wxT( "	        . = ALIGN(8);\r\n" ) );
	buf->Append( wxT( "		*(.stack)\r\n" ) );
	buf->Append( wxT( "	} > RAM\r\n" ) );
	buf->Append( wxT( "\r\n" ) );
	buf->Append( wxT( "	/* Set stack top to end of RAM, and stack limit move down by\r\n" ) );
	buf->Append( wxT( "	 * size of stack_dummy section */\r\n" ) );
	buf->Append( wxT( "	__StackTop = ORIGIN(RAM) + LENGTH(RAM);\r\n" ) );
	buf->Append( wxT( "	__StackLimit = __StackTop - SIZEOF(.stack_dummy);\r\n" ) );
	buf->Append( wxT( "	PROVIDE(__stack = __StackTop);\r\n" ) );
	buf->Append( wxT( "	\r\n" ) );
	buf->Append( wxT( "	/* Check if data + heap + stack exceeds RAM limit */\r\n" ) );
	buf->Append( wxT( "	ASSERT(__StackLimit >= __HeapLimit, \"region RAM overflowed with stack\")\r\n" ) );
	buf->Append( wxT( "}\r\n" ) );
}
